1
00:00:01,000 --> 00:00:03,000
hello and welcome to the first episode of whatever this might be I think I'm going

2
00:00:06,000 --> 00:00:08,000
to call it overnight assembly because I like assembly programming uh it's it's

3
00:00:11,000 --> 00:00:13,000
one of those just languages that are just a lot of fun to to program in and I do it at night so maybe that's

4
00:00:18,000 --> 00:00:20,000
what I'll call it generally what I want to talk about here maybe is

5
00:00:24,000 --> 00:00:26,000
my perspective as a programmer on technology and computers and games and

6
00:00:29,000 --> 00:00:31,000
and code and repositories and libraries and

7
00:00:34,000 --> 00:00:36,000
game engines and whatever else I I have a lot of opinions about a lot of things but I

8
00:00:41,000 --> 00:00:43,000
also like to get the opinions of others and kind of grow my understanding

9
00:00:47,000 --> 00:00:49,000
it is very common for programmers to be very biased about things

10
00:00:52,000 --> 00:00:54,000
we all have worked with programmers I've worked with them for about 15 years and

11
00:00:58,000 --> 00:00:60,000
we all have strong opinions about a lot of things so I want to try not to be

12
00:01:03,000 --> 00:01:05,000
strongly opinionated um I've I've changed a lot of my opinions over the years so and I feel

13
00:01:10,000 --> 00:01:12,000
like they're going to change a lot more as we go or as I go uh on programming

14
00:01:17,000 --> 00:01:19,000
so uh yeah that's that's kind of the general overview I also want to talk

15
00:01:22,000 --> 00:01:24,000
about games that love games I have thousands of old games and new games I have a I have a whole collection

16
00:01:29,000 --> 00:01:31,000
um of almost every system maybe maybe half the systems I don't want to say that

17
00:01:34,000 --> 00:01:36,000
it's something that I don't have just I collect a lot of the ones I'm interested in and I go on a spree of those type of

18
00:01:42,000 --> 00:01:44,000
games for a while so I just wound up with tons of games some duplicates that I need to get rid of but

19
00:01:49,000 --> 00:01:51,000
um and a lot of there there are quite a few games that I don't like because you get the games that you do want instead

20
00:01:54,000 --> 00:01:56,000
of a lot anyways that's it's a topic for for another day so

21
00:01:59,000 --> 00:01:61,000
I'll be talking about old games new games old computers new computers technology

22
00:02:04,000 --> 00:02:06,000
who knows uh just general things that that kind of I find interesting in the game

23
00:02:10,000 --> 00:02:12,000
development and software development field so who am I I'm Brent I've been

24
00:02:16,000 --> 00:02:18,000
programming since about 2009 I went to school for animation and uh

25
00:02:22,000 --> 00:02:24,000
so I know how to animate I know how to rig and 3D model I love I draw even I do a lot of brush pen drawing and that sort

26
00:02:30,000 --> 00:02:32,000
of stuff but mostly I program I program a lot I've programmed too much

27
00:02:36,000 --> 00:02:38,000
Lots I have a huge graveyard of projects uh because I I program essentially the

28
00:02:42,000 --> 00:02:44,000
thing that I find most find most interesting in the project and then I

29
00:02:48,000 --> 00:02:50,000
put it off into the into the GitHub graveyard it's a huge list of just things I'll probably

30
00:02:54,000 --> 00:02:56,000
never touch again but it's there if I want to um so I'm currently a professional

31
00:03:01,000 --> 00:03:03,000
programmer I've been programming for almost 15 years I I've been

32
00:03:06,000 --> 00:03:08,000
in web development game programming mobile programming console programming

33
00:03:12,000 --> 00:03:14,000
Indie programming PC all this stuff I've programmed stuff for the Game Boy I've

34
00:03:18,000 --> 00:03:20,000
programmed a little bit on the Game Boy Advance I've programmed a lot of third-party consoles they're just you

35
00:03:24,000 --> 00:03:26,000
know people just release um so just kind of I just like programming on a bunch of different

36
00:03:30,000 --> 00:03:32,000
things and I I love low level code and I love the ease of high level code so I

37
00:03:35,000 --> 00:03:37,000
I'm not partial to anything I bounce around quite often um I'm currently a game engine programmer

38
00:03:42,000 --> 00:03:44,000
uh in a artificial intelligence programmer professionally so that's what I'm paid

39
00:03:49,000 --> 00:03:51,000
to do so uh yeah sometimes it is hard to explain uh

40
00:03:58,000 --> 00:03:60,000
the things I'm interested in because I go all over the places you just saw um but here's a not so complete just

41
00:04:05,000 --> 00:04:07,000
list off the top of my head that I wrote down to kind of explain the things that I bounce around in

42
00:04:11,000 --> 00:04:13,000
because there's gonna be languages and Frameworks and all this sort of stuff just to kind of give a background of where I'm coming from and where a lot of

43
00:04:18,000 --> 00:04:20,000
my opinions on the future episodes you're gonna be from the kind of the source of my mindset so

44
00:04:28,000 --> 00:04:30,000
let's see I've programmed in C C plus plus x86 x64 the assembly languages arm

45
00:04:34,000 --> 00:04:36,000
assembly including thumb 6502 like 60 the c64 and the NES variant of that the

46
00:04:42,000 --> 00:04:44,000
z80 uh the Game Boy variant specifically assembly code c-sharp I've done bios

47
00:04:49,000 --> 00:04:51,000
programming glsl Java JavaScript python Lua HTML CSS XML you know those various

48
00:04:55,000 --> 00:04:57,000
like markup languages bash Power Cell open jail DirectX DirecTV direct right

49
00:05:01,000 --> 00:05:03,000
Cuda I did Cuda for Ray tracing um this little Ray tracing project I did I

50
00:05:07,000 --> 00:05:09,000
got like a 720p um rendering of like this Ray tracing at

51
00:05:13,000 --> 00:05:15,000
30 frames per second um it was very simple scene lots of spheres because fears are easy and uh I

52
00:05:20,000 --> 00:05:22,000
got that done on a non unlike a 1070 or something it was pretty nice

53
00:05:26,000 --> 00:05:28,000
um I've dealt with sdl and scriptum Android and Android and ndk uh wasapi if you

54
00:05:34,000 --> 00:05:36,000
don't know what that is is uh the windows audio I forgot what the S stands for

55
00:05:40,000 --> 00:05:42,000
it's not stack it's like sampling or something um API and I did that for a Voiceover IP

56
00:05:46,000 --> 00:05:48,000
thing and I was using C and I was integrating with it it was very much a C plus plus library but um I was able to get like the guid for

57
00:05:55,000 --> 00:05:57,000
the various devices and there's a lot of guid stuff you just got to get those in order to tell Windows hey this is what I

58
00:06:02,000 --> 00:06:04,000
want to do so I've dealt with that that was a very interesting um kind of random project I did

59
00:06:08,000 --> 00:06:10,000
uh I've done Network programming [Music] um on Unity long time ago I made Forge

60
00:06:15,000 --> 00:06:17,000
networking um I since archived did I just didn't have the time to to support that it got

61
00:06:21,000 --> 00:06:23,000
really popular at one point um and I refactored it to alloy but I

62
00:06:27,000 --> 00:06:29,000
never I never could finish it way too much stuff in life including having kids so it's it made it make that makes things a

63
00:06:35,000 --> 00:06:37,000
little complicated to kind of do a hobby project like that um so I've done a lot of multi-threading

64
00:06:40,000 --> 00:06:42,000
websockets MySQL redis memcached you know the various databases of dealt with vertical databases as long as well as

65
00:06:47,000 --> 00:06:49,000
like horizontal scaling databases like nosql and all that um you know lots of sqlite is basically

66
00:06:55,000 --> 00:06:57,000
the same thing why not even put on this list Frameworks like Net nodejs game engines I've done a lot of unity I've

67
00:07:02,000 --> 00:07:04,000
done quite a bit of unreal four and five now and Godot is something I just

68
00:07:08,000 --> 00:07:10,000
recently started messing around with I've programmed my own game images so that's that's kind of my perspective

69
00:07:15,000 --> 00:07:17,000
I jump around a lot I've done a lot of assembly and low level stuff but a lot of high level stuff and game engines

70
00:07:20,000 --> 00:07:22,000
like unreal and that sort of stuff so I love jumping around oh and lots of web

71
00:07:26,000 --> 00:07:28,000
I've done lots of web uh JavaScript stuff JavaScript games all that sort of stuff but it's I love to prototype in

72
00:07:33,000 --> 00:07:35,000
JavaScript it's just so fast and easy when I have some libraries that I I just use I've been using modules a lot lately

73
00:07:40,000 --> 00:07:42,000
which is a lot of fun I do like modules quite a bit um rolling them up into a single file

74
00:07:46,000 --> 00:07:48,000
and all that is annoying but modules are a lot of fun I can I can definitely say that

75
00:07:53,000 --> 00:07:55,000
um so that's kind of all of that and I kind of mentioned this uh but the most important thing about me

76
00:07:59,000 --> 00:07:61,000
is that I'm a father and a husband that's uh that's what makes my life happy

77
00:08:04,000 --> 00:08:06,000
um so other than that uh that's that's kind of my whole background

78
00:08:11,000 --> 00:08:13,000
and uh kind of my perspective on opinions now uh one thing that I'm not

79
00:08:17,000 --> 00:08:19,000
uh unfortunately is one of those ex-google employees I'm sure you've seen

80
00:08:23,000 --> 00:08:25,000
all of those YouTube videos out there that are like ex Google employee blah blah blah blah

81
00:08:30,000 --> 00:08:32,000
blah it says something like that um and they I don't know if they do that for like click bait or clout or

82
00:08:35,000 --> 00:08:37,000
something like that um Google has a lot of employees so I mean there's a lot of extra employees now that they're all getting fired I'm

83
00:08:43,000 --> 00:08:45,000
sorry it's not as I'm not attacking anyone with that I just um yeah it's just I

84
00:08:51,000 --> 00:08:53,000
I'm not one of those I'm not like a I've never worked at a gigantic company mainly because I don't want to the lower

85
00:08:57,000 --> 00:08:59,000
uh the more smaller companies they can sometimes pay

86
00:09:03,000 --> 00:09:05,000
more and also you get a lot of equity so you can get a lot in the long run out of it um versus like those big companies

87
00:09:10,000 --> 00:09:12,000
and frankly I've had a lot of friends who who've gone to those big companies and it's just boring they say that they

88
00:09:16,000 --> 00:09:18,000
like Big Chill outside they like disappear for a week and nobody even notices they

89
00:09:23,000 --> 00:09:25,000
they just uh they hardly like do any work and if they do it's something super minor kind of

90
00:09:31,000 --> 00:09:33,000
just maintaining stuff there's there's a small group of people that actually like do the hard work and of course if you're

91
00:09:38,000 --> 00:09:40,000
a programmer which you likely are I don't know who would be watching this that doesn't like the program or is interested in games you know the

92
00:09:45,000 --> 00:09:47,000
industry has a lot of leads and managers and those sorts of people that don't really program a lot you can have like a

93
00:09:50,000 --> 00:09:52,000
lead in a lead engineer and they don't do a lot of programming the one that I

94
00:09:56,000 --> 00:09:58,000
work with does a lot of programming but typically especially the big places they you can get some that have that hardly

95
00:10:01,000 --> 00:10:03,000
ever program ever even on the free time [Music] so I'm not one of those

96
00:10:07,000 --> 00:10:09,000
ex Google employee says XYZ um

97
00:10:12,000 --> 00:10:14,000
like I I like to do work and I like to participate in the team and

98
00:10:18,000 --> 00:10:20,000
um you know maybe there's a role somewhere at one of those places that is more research based or something like

99
00:10:24,000 --> 00:10:26,000
that that I can take advantage of and have a lot of fun with um but you know maybe in the core like

100
00:10:30,000 --> 00:10:32,000
operating system part of the business I'm not sure but you know uh

101
00:10:37,000 --> 00:10:39,000
yeah I don't have any one of those flashy name tags um I've released lots of games with

102
00:10:43,000 --> 00:10:45,000
companies mobile currently working on a console game so there's

103
00:10:50,000 --> 00:10:52,000
I've bounced around a lot uh so I I kind of want to learn more about

104
00:10:56,000 --> 00:10:58,000
a lot of other fields I've done I I just so many things rolling my mind

105
00:11:03,000 --> 00:11:05,000
whenever I think about those but we'll probably go over a lot of these in future episodes just things that are

106
00:11:10,000 --> 00:11:12,000
interesting in programming and computers and Tech and all that sort of stuff so

107
00:11:16,000 --> 00:11:18,000
yeah speaking of those like X Google employee gives you advice on

108
00:11:22,000 --> 00:11:24,000
how to get hired or whatever kind of videos I don't ever click on them I

109
00:11:28,000 --> 00:11:30,000
don't know why they keep sending them to me but it's I don't know if you see them maybe it's just me and I

110
00:11:35,000 --> 00:11:37,000
I don't I don't know I get a few of them I always have to like hide the channel or whatever because

111
00:11:42,000 --> 00:11:44,000
they pop up just it's almost like clockwork

112
00:11:48,000 --> 00:11:50,000
another thing that I like to do is I like to program very small I like I like very small

113
00:11:55,000 --> 00:11:57,000
programs I like very fast programs I like elegant code and elegant functions

114
00:12:00,000 --> 00:12:02,000
very small functions that sort of stuff and if you look at what these big

115
00:12:05,000 --> 00:12:07,000
companies produce they produce simple libraries and their apps they

116
00:12:11,000 --> 00:12:13,000
have tens of thousands of classes that make a I don't know if it's like code

117
00:12:18,000 --> 00:12:20,000
generation or what but they've got tens of thousands of classes which is insane to me that's a lot of that's a lot of

118
00:12:25,000 --> 00:12:27,000
something half of them probably don't know what it is half of them are probably third-party libraries which is

119
00:12:31,000 --> 00:12:33,000
even worse but yeah and their size is huge hundreds of

120
00:12:36,000 --> 00:12:38,000
megabytes um so and even worse like if you think about a lot of these apps a lot of

121
00:12:43,000 --> 00:12:45,000
people complain about Google a lot about their apps like on the experience of of

122
00:12:48,000 --> 00:12:50,000
YouTube on iPhone is different from Android which is different from Android tablet which is different from the web

123
00:12:54,000 --> 00:12:56,000
and you'd imagine when we use web technology across devices I know it's a

124
00:13:01,000 --> 00:13:03,000
little bit more complicated with the iOS ecosystem and how they want to handle with all that and web views and you know

125
00:13:07,000 --> 00:13:09,000
all that sort of stuff it gets annoying but you know they invested you know millions and millions of dollars in in

126
00:13:14,000 --> 00:13:16,000
V8 to kind of like build this platform they can work off of and their apps are

127
00:13:19,000 --> 00:13:21,000
just broken across I mean their function but they're just missing features across

128
00:13:24,000 --> 00:13:26,000
the different the the different devices and you know that's kind of crazy to me got so much money don't you think they

129
00:13:31,000 --> 00:13:33,000
can consolidate it I don't know I don't know kind of what they set up I do know how

130
00:13:36,000 --> 00:13:38,000
most teams operate I can see how it happens but yeah it's really fractured so

131
00:13:43,000 --> 00:13:45,000
that's another thing I don't really want to work with is when you go to those big companies and you got to deal with

132
00:13:48,000 --> 00:13:50,000
you know across disciplines and all this other stuff as it's called cross disciplines

133
00:13:54,000 --> 00:13:56,000
and you've got to deal with all of like you can't merge two things and you got

134
00:14:00,000 --> 00:14:02,000
to do deal with the bureaucracy I like small teams where you can just move around you can say I want to work

135
00:14:06,000 --> 00:14:08,000
on that and they said cool we can figure out you know if it works with our product let's figure out how and get you over there that's what I like about

136
00:14:12,000 --> 00:14:14,000
smaller companies too it's just it's really nice um so yeah I mean

137
00:14:20,000 --> 00:14:22,000
so it's not just Google and software companies like that is game companies too

138
00:14:25,000 --> 00:14:27,000
working on game companies and kind of seeing the games that are produced is crazy of course it's not a fair

139
00:14:32,000 --> 00:14:34,000
comparison to say look at games from the 90s and 80s and they have so little bugs

140
00:14:38,000 --> 00:14:40,000
compared to Modern games and they have you know they're so much faster and smaller blah blah it's not fair because

141
00:14:43,000 --> 00:14:45,000
there's a lot of stuff in modern games a crazy amount of stuff in modern games so I give it some slack there

142
00:14:50,000 --> 00:14:52,000
um I I do believe that the programmers were much more disciplined in the past because they had to be working with

143
00:14:56,000 --> 00:14:58,000
low-level code just with no other option so there are differences and similarities

144
00:15:03,000 --> 00:15:05,000
in some aspects but games man like the minimum requirements for games is is pretty dang high of course luckily

145
00:15:11,000 --> 00:15:13,000
computers are getting way cheap now so pretty much anyone can can muscle

146
00:15:17,000 --> 00:15:19,000
through and punch through the wall of of system requirements these days like you

147
00:15:23,000 --> 00:15:25,000
can run tons of AAA games on something like a steam deck so um you know sure they have all the

148
00:15:30,000 --> 00:15:32,000
compute power to really muscle through it but they make some weird decisions like why is why are games like 200

149
00:15:38,000 --> 00:15:40,000
gigabytes that's crazy so we we come up with this Frame scaling technology it

150
00:15:43,000 --> 00:15:45,000
was FSR is that sort of stuff and then you still put 4K Textures in your game and your game is being

151
00:15:50,000 --> 00:15:52,000
rendered at like 720p pretty much most the time or 1080p but you're putting 4K Textures in

152
00:15:56,000 --> 00:15:58,000
um and then we don't know how what's what's the amount of people that do 4K that have 4K monitors versus you know

153
00:16:04,000 --> 00:16:06,000
1080p monitors and I would imagine that you can kind of detect that and you can have steam kind of upgrade the game

154
00:16:11,000 --> 00:16:13,000
based on you know what kind of monitor they have but you can't if you have a 4K texture and you're displaying it on a

155
00:16:17,000 --> 00:16:19,000
1080p monitor let's just you it doesn't even it's it's crazy like

156
00:16:24,000 --> 00:16:26,000
it's bigger than the screen and resolution and so then you add FSR in the mix and now the 4K monitors aren't

157
00:16:30,000 --> 00:16:32,000
even rendering at 4K and to make the most of it of course you

158
00:16:37,000 --> 00:16:39,000
know this is being a little pedantic because you can have one texture that goes across multiple objects and you

159
00:16:42,000 --> 00:16:44,000
want that to be 4K in order to optimize your memory and how much you're loading it at runtime yes I get that

160
00:16:49,000 --> 00:16:51,000
um but man I how many textures are actually that versus you know a giant 4K

161
00:16:54,000 --> 00:16:56,000
Rock texture that they just splatter on rocks uh it's kind of funny I guess for

162
00:17:00,000 --> 00:17:02,000
stretching and stuff I don't know I really think there's a huge waste in memory there

163
00:17:06,000 --> 00:17:08,000
um and it's kind of you know it's so it's not just Google and big software

164
00:17:12,000 --> 00:17:14,000
companies that just absolutely waste your your CPU and your storage it's

165
00:17:18,000 --> 00:17:20,000
games too A lot of times and I think those can be better optimized but you know what

166
00:17:23,000 --> 00:17:25,000
the game is about money the game of making games is about making money for I

167
00:17:29,000 --> 00:17:31,000
mean mostly it's having fun is sometimes what the designers care about even

168
00:17:35,000 --> 00:17:37,000
though they've got to make the investors happy but 4K textures are kind of going crazy

169
00:17:42,000 --> 00:17:44,000
right now I think we can probably reduce a lot of that and rely more on the FSR stuff

170
00:17:48,000 --> 00:17:50,000
um and it's just uh you know I think I think that's uh you know that's a whole rant there uh

171
00:17:56,000 --> 00:17:58,000
there's there's also when it comes to wasting and we're going to combine the two now we're going to

172
00:18:01,000 --> 00:18:03,000
take software and we're going to combine it with games and what they both do wrong one of the

173
00:18:07,000 --> 00:18:09,000
things I hate hate is a strong word once one of the things I strongly dislike is

174
00:18:13,000 --> 00:18:15,000
uh Json I I mean it's fantastic and the argument is always

175
00:18:20,000 --> 00:18:22,000
what if we need to read it and modify it

176
00:18:25,000 --> 00:18:27,000
and the funny thing about that is they try to compress Json so it becomes unreadable it's just unreal unreadable

177
00:18:31,000 --> 00:18:33,000
garbled mess because you're trying to reduce the string sizes as you try to compress this data

178
00:18:37,000 --> 00:18:39,000
and so you lose the readability and it's still bloated and then your CPU has to pay the cost of parsing it well first of

179
00:18:44,000 --> 00:18:46,000
all serializing it so it takes this binary data it serializes it and it's got to pay somebody else's poor computer

180
00:18:50,000 --> 00:18:52,000
is going to take the cost of deserializing it and parsing it turning it back into an uh you know

181
00:18:56,000 --> 00:18:58,000
binary objects and then you have to also transport it across the wire then we

182
00:19:01,000 --> 00:19:03,000
have to use compression algorithms so we're using more CPU to compress that those strings which they can get pretty

183
00:19:07,000 --> 00:19:09,000
compressed just for the standard zip algorithm and then you and you want to send that and then you

184
00:19:12,000 --> 00:19:14,000
got to decompress it so you know I have this I have this Theory

185
00:19:19,000 --> 00:19:21,000
that Json files alone like if you if you took

186
00:19:26,000 --> 00:19:28,000
all of the the energy all of the the power that we use in our computers and

187
00:19:31,000 --> 00:19:33,000
our smartphones to parse and read and do all of that and transmit and zip Json

188
00:19:38,000 --> 00:19:40,000
data you could probably give an entire small country somewhere

189
00:19:43,000 --> 00:19:45,000
power for free because that's how much is being wasted and then you can take

190
00:19:48,000 --> 00:19:50,000
all you can add up all the heat that the CPUs generate by parsing and doing all that just a cumulative over like a month

191
00:19:55,000 --> 00:19:57,000
or something every device that does it and you could probably heat an entire small country with that amount of heat

192
00:20:03,000 --> 00:20:05,000
so it's a waste it's a it's a weird thing to think about you know um

193
00:20:08,000 --> 00:20:10,000
you We complain a lot about oh you know crypto mining using tons of

194
00:20:13,000 --> 00:20:15,000
energy blah blah blah uh it's it's bad for the environment well you know what

195
00:20:18,000 --> 00:20:20,000
else is bad for the environment uh using Json files for everything when you can

196
00:20:24,000 --> 00:20:26,000
simply and and easily just serialize binary where you just take binary

197
00:20:30,000 --> 00:20:32,000
make it basically into a file and send it you can do whatever compression you want if you want to but binary is already

198
00:20:37,000 --> 00:20:39,000
smaller Json so yeah all the crypto miners wasting tons of power right

199
00:20:43,000 --> 00:20:45,000
across across the planet yeah you know what else is wasting power Json deserialization my goodness Json

200
00:20:49,000 --> 00:20:51,000
deserialization and 4K textures let's get those reduced and let's let's save the environment from from just taking

201
00:20:56,000 --> 00:20:58,000
those out of the out of the picture so uh yeah that's that's kind of my

202
00:21:02,000 --> 00:21:04,000
perspective on on how did I get on this let's talk about Google people on YouTube uh or ex-google

203
00:21:09,000 --> 00:21:11,000
people uh so anyways yeah it's just super wasteful the entire industry is

204
00:21:16,000 --> 00:21:18,000
very wasteful in how they do things and I I know we don't all use C but in C you

205
00:21:23,000 --> 00:21:25,000
can just take a struct or even a a compound struct of plain old data let's say there's no pointers or even if you

206
00:21:30,000 --> 00:21:32,000
just write a little function to get rid of the pointers um I I mean I would I would argue that

207
00:21:35,000 --> 00:21:37,000
if you're going to be serializing data and there's going to be pointers in there um if you have to have them in there you

208
00:21:42,000 --> 00:21:44,000
should separate them into their own structure so you can easily strip it out or put it as like a head and then do the

209
00:21:47,000 --> 00:21:49,000
offset so you can find the offset of where the Pod starts pod for plain old data

210
00:21:52,000 --> 00:21:54,000
and then just write it but and see you can just take that struct and just

211
00:21:58,000 --> 00:21:60,000
right to a file or across the network you don't have to do any compression or

212
00:22:03,000 --> 00:22:05,000
serialization or anything like that you just here's a struct it's a set of data and then send it off and

213
00:22:10,000 --> 00:22:12,000
that's how much energy you would save from doing that is is quite tremendous

214
00:22:16,000 --> 00:22:18,000
but I know we don't all use C and I know C is I didn't say it but C is my

215
00:22:22,000 --> 00:22:24,000
favorite language is just I love it because I can use it in a lot of things like Game Boy advanced programming so

216
00:22:29,000 --> 00:22:31,000
it's just nice and flat and I don't have to worry about objects I'm a very simple man but

217
00:22:35,000 --> 00:22:37,000
let's say you're doing C plus plus and I do a lot of C plus plus obviously my my day job is programming in c plus

218
00:22:42,000 --> 00:22:44,000
um so in C plus plus yes you do have a little bit of a problem because you don't have

219
00:22:48,000 --> 00:22:50,000
an ABI you don't have a standard for ABI so you don't know if application binary

220
00:22:54,000 --> 00:22:56,000
interface basically the byte order of a class or a struct

221
00:23:00,000 --> 00:23:02,000
so uh just I guess I can explain that real quick for those of you who don't know and see you have this flat API and

222
00:23:08,000 --> 00:23:10,000
um now I I don't want to get too much into alignment and all that sort of stuff

223
00:23:14,000 --> 00:23:16,000
um because you do have to do some work there if you're if you're dealing with things like that if you if you're

224
00:23:21,000 --> 00:23:23,000
say serial if you're sending something from like a 64-bit computer over to a 16-bit computer you're definitely going

225
00:23:28,000 --> 00:23:30,000
to have to do a little bit of work [Music] on that but let's say that you set up

226
00:23:33,000 --> 00:23:35,000
your struct with the proper alignment and all that and see you could just send it straight across and knowing that maybe your smallest or minimum spec is

227
00:23:40,000 --> 00:23:42,000
16 is going to be a did I say bite 16 bits so

228
00:23:46,000 --> 00:23:48,000
you can uh let's say that you want to do that uh I've lost my train of thought on

229
00:23:53,000 --> 00:23:55,000
that alignment and let's say you have all that you can send it straight across now one of the problems you have in C

230
00:23:58,000 --> 00:23:60,000
plus plus is that it doesn't have that ABI across compilers and even compiler versions like you if you use clang

231
00:24:06,000 --> 00:24:08,000
X and then you use cling y it's not guaranteed that the name mangling or the

232
00:24:14,000 --> 00:24:16,000
which doesn't matter in this in this argument but the API is going to be the same and that's because mainly I think

233
00:24:21,000 --> 00:24:23,000
it's because of the V table a v table is a piece is a is a block of

234
00:24:28,000 --> 00:24:30,000
your your class for virtual classes where they can they point to the

235
00:24:33,000 --> 00:24:35,000
function it should call when you call a function as you know you can create a virtual function you can override those

236
00:24:38,000 --> 00:24:40,000
functions in the child classes or the derivatives whatever you want to call them

237
00:24:44,000 --> 00:24:46,000
now that that V table could be at the top it could be split right in the middle of the the binary data it could

238
00:24:50,000 --> 00:24:52,000
be like at the end of the class um there's no telling where that is so just like serializing and sending it off

239
00:24:55,000 --> 00:24:57,000
is going to be a little bit of a problem and that's where serialization labor libraries start coming in

240
00:25:02,000 --> 00:25:04,000
um you have other languages where you don't have access to the raw binary of

241
00:25:07,000 --> 00:25:09,000
the class um without you know turning on special Flags or whatever for the compiler like in c-sharp or say JavaScript or

242
00:25:14,000 --> 00:25:16,000
something like that so sending things straight over

243
00:25:19,000 --> 00:25:21,000
like you do in C is not as easy and so I do understand that part of where we get into this

244
00:25:28,000 --> 00:25:30,000
this whole let's Json serialize it because then I can write my program in c-sharp and then have a JavaScript

245
00:25:35,000 --> 00:25:37,000
client be able to read the data and I don't have to worry about I don't have to worry about indian-ness or I don't

246
00:25:41,000 --> 00:25:43,000
have to worry about you know the alignment or anything like that um so yeah there it does kind of reduce

247
00:25:48,000 --> 00:25:50,000
the cost of of effort up front to to do those kind of like just use the Json

248
00:25:54,000 --> 00:25:56,000
library but it's so wasteful I think that if you just it it's really

249
00:26:00,000 --> 00:26:02,000
programs programs companies have this weird thing where they think

250
00:26:05,000 --> 00:26:07,000
that it takes months to do something as simple as serializing some bites they're

251
00:26:12,000 --> 00:26:14,000
like well I don't know what that fits into the schedule um man that's a whole other thing let's not go

252
00:26:18,000 --> 00:26:20,000
on that but yeah I I do understand that you know

253
00:26:24,000 --> 00:26:26,000
it's a it's a cost analysis um no company I can tell you this I've worked at so many different companies no

254
00:26:31,000 --> 00:26:33,000
company they none of them care about how much uh Power you're drawing from a wall

255
00:26:38,000 --> 00:26:40,000
socket to run their program as long as it's fast and it gets the uh the player

256
00:26:44,000 --> 00:26:46,000
or the client what they need um now this is a different argument for

257
00:26:49,000 --> 00:26:51,000
mobile and mobile they sometimes do care because they want good battery life I don't want to say

258
00:26:56,000 --> 00:26:58,000
excellent battery life otherwise they wouldn't use engines that drain battery life they would you know write their own

259
00:27:03,000 --> 00:27:05,000
stuff um but they they do care a little bit there so I'll give them credit that on

260
00:27:10,000 --> 00:27:12,000
that so this brings us to to things like

261
00:27:16,000 --> 00:27:18,000
uh gosh what's what's it called protobuf okay protobuf um does help you with it that binary

262
00:27:23,000 --> 00:27:25,000
seller is serialization now I didn't I didn't go through the entirety of the class or all the classes to determine

263
00:27:31,000 --> 00:27:33,000
whether the binary serialization is efficient um I assume it's efficient because it's

264
00:27:38,000 --> 00:27:40,000
open source and a lot of people looked at it and probably have contributed and I do I I know I prefixed this earlier

265
00:27:46,000 --> 00:27:48,000
about Google employees and all that sort of stuff it's not to say they're bad programmers

266
00:27:51,000 --> 00:27:53,000
um it's just uh you know there are some bad programs that come out of Google a

267
00:27:57,000 --> 00:27:59,000
lot of bad programs that come out of Google and it's not the fault of the programmer most of the time is The Fault

268
00:28:02,000 --> 00:28:04,000
the you know the company um so they do have good programmers that do

269
00:28:07,000 --> 00:28:09,000
study this stuff and take the effort and they do the research and all this other stuff which is very important to everybody especially when you open

270
00:28:13,000 --> 00:28:15,000
source it so no complaints from me there but purple buff is like hundreds of

271
00:28:20,000 --> 00:28:22,000
thousands of lines of code to serialize some bytes and that is huge

272
00:28:26,000 --> 00:28:28,000
um I have this I have this this thought about libraries and even

273
00:28:34,000 --> 00:28:36,000
programmers just inside of a company uh programmers are often stuck to doing

274
00:28:39,000 --> 00:28:41,000
a specific type of work on these big companies so

275
00:28:44,000 --> 00:28:46,000
I like to say that if you took a person and you paid them a pretty good amount of money

276
00:28:51,000 --> 00:28:53,000
and you give them a rock in the corner of a room and you said

277
00:28:58,000 --> 00:28:60,000
your job is to manage this rock the best thing that person could do

278
00:29:05,000 --> 00:29:07,000
is not do anything the rock is going to be completely fine but chances are you're going to come back two weeks

279
00:29:10,000 --> 00:29:12,000
later and the rock is going to have a little house set up with a little dinner table and it's kind of a it's going to

280
00:29:15,000 --> 00:29:17,000
be laying inside of a little bed with a blanket over it and then once you ask the developer how he's going you're

281
00:29:21,000 --> 00:29:23,000
going to say oh well you see I've optimized the living situation for this rock and I've also you know created a

282
00:29:28,000 --> 00:29:30,000
Giro workflow so that we can keep track of its schedule and that's just how people are when you

283
00:29:33,000 --> 00:29:35,000
pay them a good amount of money and tell them to do something they overdo it every time because

284
00:29:41,000 --> 00:29:43,000
um maybe it's because they're bored and they need something to do and the task wasn't interesting enough so they go way

285
00:29:47,000 --> 00:29:49,000
off the wall or maybe they're trying to prove something you know they're they they want a higher salary or maybe a

286
00:29:54,000 --> 00:29:56,000
different position so they they're really kind of um you know they really kind of Polish The

287
00:30:00,000 --> 00:30:02,000
Rock so to speak so I feel that's the case for a lot of libraries you you set

288
00:30:07,000 --> 00:30:09,000
a library out there let's say a logging Library and it does sufficiently what you need

289
00:30:14,000 --> 00:30:16,000
it to do for your program so then all of a sudden

290
00:30:19,000 --> 00:30:21,000
everyone I don't know it gets picked up by by somebody on a YouTube video or something and then everybody's using

291
00:30:25,000 --> 00:30:27,000
Olson you have half a million people downloading or half million downloads on your library

292
00:30:31,000 --> 00:30:33,000
you all of a sudden turn over and say man there's a lot of people downloading this Library

293
00:30:36,000 --> 00:30:38,000
I need to improve it and so you start going in there and you start adding tons and tons of features that are not

294
00:30:44,000 --> 00:30:46,000
needed at all remember that you got you know half a half a million downloads already that means it does what people

295
00:30:51,000 --> 00:30:53,000
want and of course they're going to come and complain the other part is and as this is not the fault of the the person

296
00:30:57,000 --> 00:30:59,000
polishing the rock this is the Fault to the people who are using their libraries people often think that if a library is

297
00:31:04,000 --> 00:31:06,000
not updated in the past like month or half a year it's all of a sudden just broken it just you can't use this it's it's just ugh it

298
00:31:12,000 --> 00:31:14,000
doesn't work anymore like code just the code just rotted itself out of existence for setting from setting there for too

299
00:31:19,000 --> 00:31:21,000
long I don't know and there's a lot of pressure on that to keep them updating and doing things like that now

300
00:31:26,000 --> 00:31:28,000
also you have open source so you have you know hundreds of people sending issues and also pull requests and you

301
00:31:33,000 --> 00:31:35,000
start accepting things and it just bloats and so this is what happens with libraries and I don't think protobuf is

302
00:31:39,000 --> 00:31:41,000
any exception to this I just want to serialize some bytes and so protobuf is

303
00:31:46,000 --> 00:31:48,000
is is quite big here I'll let me let me look up the

304
00:31:53,000 --> 00:31:55,000
protobuf [Music] here so we have the protocol buffers

305
00:32:00,000 --> 00:32:02,000
and I'll actually just is this the main library looks like it

306
00:32:06,000 --> 00:32:08,000
it was updated five hours ago this thing worked like five years ago or whatever when I was

307
00:32:12,000 --> 00:32:14,000
using it um but it's still being updated you know five years later it's in serious

308
00:32:18,000 --> 00:32:20,000
business taking some bites and putting them into a file across the network and I know I'm simplifying it I've done tons of network

309
00:32:25,000 --> 00:32:27,000
stuff I get it um half the time you don't even use protobuf for Network stuff so there's

310
00:32:31,000 --> 00:32:33,000
there's that um but we're gonna I'm just gonna I'm gonna grab this guy hold on I've got

311
00:32:37,000 --> 00:32:39,000
to turn off the thing on my computer that talks to me whenever I copy text okay so I'm gonna grab this guy

312
00:32:44,000 --> 00:32:46,000
and we will go ahead and

313
00:32:50,000 --> 00:32:52,000
go ahead and clone it down somewhere um

314
00:32:56,000 --> 00:32:58,000
put it in in a document documents

315
00:33:02,000 --> 00:33:04,000
go to get get clone that guy so we'll clone it down and let's take a

316
00:33:09,000 --> 00:33:11,000
look at where the source code is for this guy and of course a lot of the source code is going to be in you know language

317
00:33:16,000 --> 00:33:18,000
wrappers and that's that might be where you know half the updates are coming from is language rappers I don't know

318
00:33:21,000 --> 00:33:23,000
but you got C sharp Java python Ruby rust blah blah so it's probably gonna be in the source

319
00:33:27,000 --> 00:33:29,000
folder and in this Google Proto buff here

320
00:33:33,000 --> 00:33:35,000
so it's still download but let's take a little

321
00:33:39,000 --> 00:33:41,000
ubunt uh local instance here and let's uh go over to

322
00:33:47,000 --> 00:33:49,000
uh let's go to what is it Mount see users

323
00:33:54,000 --> 00:33:56,000
Grant documents get and this is going to be inside of Proto buff

324
00:34:01,000 --> 00:34:03,000
and then if we go inside of this folder so let's see the source

325
00:34:08,000 --> 00:34:10,000
to use Google so you have Proto buff so here we are

326
00:34:14,000 --> 00:34:16,000
inside of Proto buff and we're going to do a little experiment here if I type it right so

327
00:34:20,000 --> 00:34:22,000
we're going to find dot um we need a little reg X I have this

328
00:34:26,000 --> 00:34:28,000
written down because I am not uh you know the most incredible person

329
00:34:33,000 --> 00:34:35,000
um remembering all these uh Unix or Linux commands one of the

330
00:34:39,000 --> 00:34:41,000
beautiful things about Linux is that programs do a single thing they do it well and I I love that that's that's a

331
00:34:45,000 --> 00:34:47,000
the best design decision anyone could have in fact I think I can you know let

332
00:34:50,000 --> 00:34:52,000
me copy I think I could just copy this text and paste it into the terminal here

333
00:34:56,000 --> 00:34:58,000
I know I can whoop it looks like I got a weird binary

334
00:35:02,000 --> 00:35:04,000
thing at the beginning there let me see if it's because the way I copied it no here let's just go to

335
00:35:12,000 --> 00:35:14,000
you can't see it off screen but I have this inside of a little word or something okay

336
00:35:19,000 --> 00:35:21,000
okay F there we go so I'm going to do this regex to to just get all the headers CCC files and CPP files because

337
00:35:27,000 --> 00:35:29,000
this is a C plus plus repository I could do print zero instead of print

338
00:35:32,000 --> 00:35:34,000
so that I can do x x Arc zero I want to do basically a line count I'm going to

339
00:35:39,000 --> 00:35:41,000
count the lines in this project so just to serialize bytes in one

340
00:35:46,000 --> 00:35:48,000
language uh is over a quarter million lines of code and I don't know if some of those

341
00:35:54,000 --> 00:35:56,000
lines are comments or whatever but this I've written a game engine that that

342
00:36:00,000 --> 00:36:02,000
uses Vulcan and all all in C so I've got to do the Vulcan library in C and then

343
00:36:05,000 --> 00:36:07,000
it works with entities and it has it just it has all the Transformations

344
00:36:11,000 --> 00:36:13,000
and all that sort of stuff including the shaders and it's less code is less lines

345
00:36:16,000 --> 00:36:18,000
of code than this and it has tons of comments too so a quarter over a quarter million uh lines of code is a lot of

346
00:36:22,000 --> 00:36:24,000
code for serializing some bytes now that's kind of where I'm coming from on this and if we go to the rappers

347
00:36:29,000 --> 00:36:31,000
hopefully um they're not as they're not as big let's take a look at

348
00:36:36,000 --> 00:36:38,000
let's say C sharp um there's a lot of batch files in here Keys v test okay here we go Source okay

349
00:36:44,000 --> 00:36:46,000
so C sharp source and then of course we've got

350
00:36:51,000 --> 00:36:53,000
what are all these uh tests and let's just do the whole thing we only life is

351
00:36:56,000 --> 00:36:58,000
short um so this is much easier we can just do

352
00:37:02,000 --> 00:37:04,000
CS files so this one alone is 142 139 and this is

353
00:37:11,000 --> 00:37:13,000
a wrapper to like call I don't know if they re-implemented the code in C sharp or if they're calling the C plus plus

354
00:37:17,000 --> 00:37:19,000
code here not a percent sure but still it's it's a lot of

355
00:37:22,000 --> 00:37:24,000
it's a lot of code to write some bytes so that's kind of

356
00:37:29,000 --> 00:37:31,000
my perspective on you know big companies their code bases libraries

357
00:37:35,000 --> 00:37:37,000
um I thought this is a nice simple way to to start off whatever series I'm doing

358
00:37:42,000 --> 00:37:44,000
here um let's just talk about some code I like code and I'm not like I said I'm not

359
00:37:49,000 --> 00:37:51,000
complaining about all this it all functions I've used it it's it makes things a lot easier

360
00:37:54,000 --> 00:37:56,000
companies should use them rather than rolling their own because most likely

361
00:38:00,000 --> 00:38:02,000
you're going to make a mistake if you roll your own and you've got to deal with all that debugging and stuff I'm just putting out I uh hypothesis

362
00:38:08,000 --> 00:38:10,000
hypotheses or or ideas here about how much power is wasted and kind of how how

363
00:38:13,000 --> 00:38:15,000
programmers um you know polish rocks and I polish rocks

364
00:38:18,000 --> 00:38:20,000
all the time so uh yeah and I I think that's

365
00:38:24,000 --> 00:38:26,000
um yeah that's that's all I got for for our

366
00:38:30,000 --> 00:38:32,000
my view on just coding programming

367
00:38:37,000 --> 00:38:39,000
third-party libraries I don't I don't know exactly what I'm going to go over and kind of future with these few future

368
00:38:46,000 --> 00:38:48,000
future podcasts I guess these are um now I understand what I'm sure what

369
00:38:51,000 --> 00:38:53,000
I'm going to go over I can go over uh you know assembly for Game Boy games I can kind of dive into

370
00:38:57,000 --> 00:38:59,000
other people's code I can just talk about games in general and game design I have a lot of ideas or thoughts on game

371
00:39:04,000 --> 00:39:06,000
design um and and try not to ramble on them here and I've got uh you know

372
00:39:11,000 --> 00:39:13,000
lots of thoughts of how we connect software together from you know straight from the the hardware in the CNC plus

373
00:39:18,000 --> 00:39:20,000
plus area or you know whatever language level low level language that you use or

374
00:39:24,000 --> 00:39:26,000
like all the way up to how it communicates with a web server

375
00:39:29,000 --> 00:39:31,000
um yeah I think that there's just a lot to think about a lot to talk about and a

376
00:39:35,000 --> 00:39:37,000
lot to have fun with um so this is like the first episode of of

377
00:39:40,000 --> 00:39:42,000
this podcast and I don't know how many people are gonna watch it and people are even gonna see it but if

378
00:39:47,000 --> 00:39:49,000
you guys do exist uh feel free to to like throw out some ideas of what to talk about

379
00:39:53,000 --> 00:39:55,000
because um like I said it doesn't it doesn't have to be just about code I love code I could talk about code all day I and it's

380
00:40:00,000 --> 00:40:02,000
been like 40 minutes I didn't even notice this time flew by um but I could talk about games and game

381
00:40:06,000 --> 00:40:08,000
design old games collecting games I collect a lot of games I could talk about art um

382
00:40:11,000 --> 00:40:13,000
art as it relates to programming or games or or just art in general I like to draw some I have a lot of thoughts on

383
00:40:18,000 --> 00:40:20,000
on that sort of stuff so uh yeah it'd be really interesting to see if anybody has

384
00:40:24,000 --> 00:40:26,000
some ideas of what to look over um I I thought this was

385
00:40:30,000 --> 00:40:32,000
a lot of fun I like talking about code this is awesome anyways see you guys
